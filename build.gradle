plugins{
    id "java"
}

ext{
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME")
    sdkVersion = '30'
    artifactFilename = "GalaxyUnivers.jar"
}

group "putri1244"

sourceSets.main{
    java.srcDir("src/")
    resources.srcDir("assets/")
}

repositories{
    mavenCentral()
    maven{ url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven{ url 'https://www.jitpack.io' }

}

dependencies{
    annotationProcessor 'com.github.Anuken:jabel:$jabelVersion'
    compileOnly "com.github.Anuken.MindustryJitpack:$mindustryVersion"
    compileOnly "com.github.Anuken.Arc:arc-core:$mindustryVersion"
}

jar.archiveFileName.set("raw-$artifactFilename")

def isWindows = System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")

task alphableed {
    doLast {
        println "Starting alpha-bleeding process..."
        
        // Buat daftar semua file PNG
        def pngFiles = []
        file('assets/sprites').eachFileRecurse { file ->
            if (file.name.endsWith('.png')) {
                pngFiles << file
                println "Found PNG: ${file.path}"
            }
        }
        
        // Proses setiap file PNG
        pngFiles.each { pngFile ->
            println "Processing: ${pngFile.path}"
            
            exec {
                workingDir '.'
                if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                    commandLine 'cmd', '/c', 'alpha-bleeding-linux.exe', pngFile.path
                } else {
                    commandLine './alpha-bleed', pngFile.path
                }
                
                ignoreExitValue = true
                standardOutput = new ByteArrayOutputStream()
                errorOutput = new ByteArrayOutputStream()
                
                doLast {
                    println "Output for ${pngFile.name}:"
                    println standardOutput.toString()
                    if (errorOutput.toString()) {
                        println "Errors for ${pngFile.name}:"
                        println errorOutput.toString()
                    }
                    
                    // Handle output file
                    def bleedFile = new File(pngFile.parentFile, "${pngFile.name}-bleed")
                    if (bleedFile.exists()) {
                        println "Moving bleed file for ${pngFile.name}"
                        bleedFile.renameTo(pngFile)
                    }
                }
            }
        }
    }
}

task dexify(type: Jar){
    archiveFileName.set(artifactFilename)

    final File jarArtifact = new File(tasks.jar.archiveFile.get().asFile.parent, "raw-$artifactFilename"),
               dexedArtifact = new File(tasks.dexify.getTemporaryDir(), "dexed.jar")

    doFirst{
        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.asList() + configurations.runtimeClasspath.asList() + [new File("$sdkRoot/platforms/android-$sdkVersion/android.jar")])

        exec{
            workingDir dexedArtifact.parent
            def command = ["d8", "--min-api", "14"]
            for(def file : files){
                command += "--classpath"
                command += file.path
            }

            command += ["--output", dexedArtifact, jarArtifact]

            if(isWindows){
                commandLine("cmd", "/c", *command)
            }else{
                commandLine(*command)
            }
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex dependsOn "build", "dexify"

task buildMove(dependsOn: build){
    doLast{
        copy{
            from "build/libs/raw-BetaMindy.jar"
            into System.getenv("destination")
        }
    }
}

tasks.withType(JavaCompile){
    targetCompatibility = 8
    sourceCompatibility = JavaVersion.VERSION_17
    options.encoding = "UTF-8"
    options.compilerArgs += ["-Xlint:deprecation"]
    if(JavaVersion.current() != JavaVersion.VERSION_1_8){
        options.compilerArgs.addAll(['--release', '8'])
    }
    compileJava.options.fork = true
}
