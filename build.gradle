plugins {
    id "java"
}

ext {
    mindustryVersion = 'v146'
    jabelVersion = "93fde537c7"
    sdkRoot = System.getenv("ANDROID_HOME") ?: "path/to/default/android/sdk"
    sdkVersion = '30'
    artifactFilename = "GalaxyUnivers.jar"
}

group "putri1244"

sourceSets.main {
    java.srcDir("src/")
    resources.srcDir("assets/")
}

repositories {
    mavenCentral()
    maven { url "https://raw.githubusercontent.com/Zelaux/MindustryRepo/master/repository" }
    maven { url 'https://www.jitpack.io' }
}

dependencies {
    annotationProcessor "com.github.Anuken:jabel:${jabelVersion}"
    compileOnly "com.github.Anuken.Mindustry:core:${mindustryVersion}"
    compileOnly "com.github.Anuken.Arc:arc-core:${mindustryVersion}"
}

jar {
    archiveFileName = "raw-${artifactFilename}"
    
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

def isWindows = System.getProperty("os.name").toLowerCase(Locale.ROOT).contains("windows")

task dexify(type: Jar) {
    archiveFileName = artifactFilename
    destinationDirectory = file("build/libs")

    def jarArtifact = tasks.jar.archiveFile.get().asFile
    def dexedArtifact = new File(temporaryDir, "dexed.jar")

    doFirst {
        // Verifikasi SDK root
        if (!sdkRoot) {
            throw new GradleException("ANDROID_HOME environment variable is not set!")
        }

        // Verifikasi file android.jar
        def androidJar = new File("${sdkRoot}/platforms/android-${sdkVersion}/android.jar")
        if (!androidJar.exists()) {
            throw new GradleException("Android platform ${sdkVersion} not found at ${androidJar}")
        }

        //collect dependencies needed for desugaring
        def files = (configurations.compileClasspath.files + 
                    configurations.runtimeClasspath.files + 
                    [androidJar]).collect { it.path }

        exec {
            workingDir dexedArtifact.parent
            def command = ["d8", 
                         "--min-api", "14",
                         "--lib", androidJar.path,
                         "--release",
                         "--output", dexedArtifact.path,
                         jarArtifact.path]

            files.each { path ->
                command.add("--classpath")
                command.add(path)
            }

            if (isWindows) {
                commandLine("cmd", "/c", *command)
            } else {
                commandLine(*command)
            }
        }
    }

    from(zipTree(jarArtifact), zipTree(dexedArtifact))
}

task buildDex {
    dependsOn "build", "dexify"
}

task buildMove(dependsOn: build) {
    doLast {
        def destination = System.getenv("destination")
        if (!destination) {
            throw new GradleException("destination environment variable is not set!")
        }
        
        copy {
            from "build/libs/raw-${artifactFilename}"
            into destination
        }
    }
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    
    // Pengaturan compatibility
    sourceCompatibility = JavaVersion.VERSION_17
    targetCompatibility = JavaVersion.VERSION_1_8
    
    options.compilerArgs += [
        "-Xlint:deprecation",
        "--release", "8"
    ]
    
    // Fork compilation
    options.fork = true
}